So, what is all this :

When it starts, you are asked to log in or to make an account. This is so it can track your progress and tie it to a certain identity.

Then, the main frame appears, where you can choose from the "Written Material" section, from the "Tests" section, or from the "Gallery" section, where pictures, audio / video files might be found.
Material from "Written Material" and "Tests" may require a certain level of progress tied to the account.

Teachers, on the other hand, directly create and set as ready materials, media and tests, set up the settings, and see the progress and scores of the list of users. A static, unique token is required to create a teacher account.

Besides, every instance has a [socket] listening for data / requests which can be sent only by devices with an admin level account in use.

----------------------------------------------------------
So, what to do now, since all the loading has been done...

#Add the "Select lesson" frame.
#Add the main students' frame.

-Add the material section, with loaded materials.
-Add the tests section, with all the tests.
-Add the gallery section, with all the media.
-Add the profile section, which should contain data about the student.

-Add the admin frame, the one for the teachers.
-Add the ability to hold a class and to request data from the students.
-Add the ability to send data to the student clients.
-Add the ability to create new modules / components of modules.

-Add the encryption of data.

\\\\\\\\\\\\\\\\\\\\\\\\\\

-Do checks so the data that the teacher inputs when creating a new lesson doesn't contain weird symbols in weird spots.
-I think that, for the sake of transmitting this across a network, the only elements inside a gallery will be pictures and just maybe audio only files.
-There definitely should be default media files, so that the app can look better.
-Most likely, a large revamp awaits.

A lesson is a folder which contains: 
    -The folder for tests.
    -The folder for materials.
    -The folder for gallery.
    -The settings file.

A teacher makes/initiates:
    -A new material by specifying its title, level, and contents.
    -A test by specifying its title, level, and title, content and points for each exercise to solve.
    -A gallery file by specifying a title and a file with the help of a FileChooser.
    -Settings for a said module, such as title.
    -A transmission of data by either sending a whole new lesson (module) or specifying bits to add / replace in a pre-existent module. 

The available actions for a teacher are:
    -Add test, material, gallery entry;
    -Remove test, material, gallery entry. 
    -Change global project settings. 
    -Request statistics about the users and their progress.

The types of problems that will exist are : 
    -Choose the correct variant. C##V
    -Drag and drop. D##D
    -Complete the empty line. C##E



Let's reiterate: 

-I open the application. 
-The database of all the users is loaded.
-I get to log in. 
-I can also make an account.
-When I make an account, depending on the type, student or teacher, I have different fields to fill.
-Depending on the type of the account, I will have different interaction after I log in.

If I log in with a student account : 

    -I get to pick a current module. 
    -After I pick a module, all the data related to that module is loaded.
    -I can go over the materials, gallery, complete a test or see my profile.
    -I can also change the running module, for a different lesson.

    -Materials are all put in the materials bar. All the data, sorted, which pops when clicked on.
    -The tests are also there, sorted, with a disginguishing element on, where the case is, to show which has been completed and which has not.
    -The gallery works in the same way as the materials section, sorted and popping.
    -The profile section displays overall statistics and analysis of the data stored, per account.
    -The profile section doesn't go into full detail, even though it keeps it. Just to fit.

-The progress storing is done per account, then per element(gallery, test, material). 
-It keeps all sorts of information, either to process it and display locally, or to parse it via network.

If I log in with a teacher account : 
    
    -I can create a new module / bits of a module.
    -I can edit / delete a module / bits of a module, only locally.
    -I get o create and manage classes, where clients have IPs and other details.
    -I get to send data to clients and make requests to the clients, to get data back.
    -I also get to manage the database of local accounts.

-A user of a student client has nothing to do directly with the networking part. The client works, but always obeys.
-A teacher client can only push to and get information from, not manage it locally, such as deleting data from the client, therefore, each client has to manage its own data through a teacher account.

To de-obfuscate:
-A student account user sits, reads and solves. The client agrees to whatever else is going on on the network
-A teacher account usr sits, reads, solves, builds, requests and sends. It is the one giving orders to the classroom.
-As for local setup, the student account can do nothing. The teacher account can delete / change local files. Now, this can only happen locally, unfortunately. There can be no teacher on a network,simply deleting / altering files.


###################################

I'm not even going to bother with what's written above. What I should be doing this winter "free-time" is as follows:

	Change code around the "main objects" so they obey the following: 
		-A holder object, to hold all the information and provide functions to hand it, as well as data
		 structures and a personal ability to process it, not open files though.
		-A frame object, to do everything related to the frame. It takes info from Holder, projects it,
		 occasionally sending feedback to the core object.
		-A core object, which will do everything read / write related, as well as any aditional computing
		 requirements. This will also handle all about networking, if there is going to be such thing.
